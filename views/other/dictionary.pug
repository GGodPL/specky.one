doctype html

include ../includes/embed.pug

head
    title Dictionary
    +embed(
        "Dictionary",
        "Literally the entire dictionary (trust)",
        "https://specky.one/dictionary",
        "https://drsw10gc90t0z.cloudfront.net/AcuCustom/Sitename/DAM/544/Dictionary__Shutterstock1.jpg",
        "#4B0082",
    )

body
    h1 Dictionary
    p.
        guys please help me

    .messages

template#message_template
    .message
        .head
            img.avatar
            p.username
            p.timestamp
        .body
            p.content
            p.edited
        .footer
            .reactions

template#reaction
    .reaction
        img.reaction-image
        p.reaction-count

script.
    (async function() {
        const dictionary = await fetch("/dictionary/dictionary1.json").then(j=>j.json());

        const allUsers = new Map();

        for(const message of dictionary) {
            const user = allUsers.has(message.author_id) ? allUsers.get(message.author_id) :
                await fetch(`https://discord-arts.asure.dev/v1/user/${message.author_id}`)
                    .then(j=>j.json())
                    .then(user => (allUsers.set(message.author_id, user.data), user.data) )
                    .catch(()=>{});

            const dateString = message.timestamp;
            const date = new Date(dateString);

            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
            const year = date.getFullYear();
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');

            const formattedDate = `${day}/${month}/${year} ${hours}:${minutes}`

            const template = document.getElementById('message_template').content.cloneNode(true);
            template.querySelector('img.avatar').src = user.assets.avatarURL || user.assets.defaultAvatarURL;
            template.querySelector('p.username').textContent = user.basicInfo.globalName || user.basicInfo.username;
            template.querySelector('p.timestamp').textContent = formattedDate;
            template.querySelector('p.content').textContent = message.content;
            template.querySelector('p.edited').textContent = message.edit && "(edited)";

            console.log(message.reactions);
            for(const reaction of message.reactions) {
                const reactions = document.getElementById('reaction').content.cloneNode(true);
                reactions.querySelector('img.reaction-image').src = reaction.emoji.imageUrl;
                reactions.querySelector('p.reaction-count').textContent = reaction.count;
                template.querySelector('.reactions').appendChild(reactions);
            }
            
            document.querySelector('div.messages').appendChild(template);
        }
    })();

style.
    body {
        background-color: #2f3136;
    }

    /* bing copilot my beloved */

    .message {
        display: flex;
        flex-direction: column;
        margin: 10px 0;
        padding: 10px;
        background-color: #2f3136;
        border-radius: 5px;
        color: #dcddde;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    }

    .head {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .body {
        display: flex;
        align-items: center;
    }

    img.avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 10px;
    }

    p.username {
        font-weight: bold;
        margin: 0;
        color: #ffffff;
    }

    p.timestamp {
        font-size: 0.75rem;
        color: #72767d;
        margin-left: 10px;
    }

    p.content {
        margin: 0;
        line-height: 1.4;
        color: #dcddde;
    }

    p.edited {
        font-size: 0.75rem;
        color: #72767d;
        margin-left: 10px;
    }

    .footer {
        display: flex;
        align-items: center;
        margin-top: 5px;
    }

    .reactions {
        display: flex;
        align-items: center;
    }

    .reaction {
        display: flex;
        align-items: center;
        background-color: #36393f;
        border-radius: 10px;
        padding: 2px 6px;
        margin-right: 5px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .reaction:hover {
        background-color: #42464d;
    }

    img.reaction-image {
        width: 16px;
        height: 16px;
    }

    p.reaction-count {
        font-size: 0.75rem;
        color: #dcddde;
        margin-right: 5px;
    }

