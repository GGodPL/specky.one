head
    title ANMT
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    link(rel="icon" type="image/png" size="64" href="assets/icon.png")

body
    input#input-button(type="file")
    br
    canvas#anmt-canvas(width=0 height=0)
    br
    button#play-button(type="button") Play
    button#pause-button(type="button") Pause
    button#reverse-button(type="button") Reverse
    br
    div#current-state Not Playing
    br
    div#current-frame Frame: 0

style.
    #input-button {
        background-color: #fff;
        z-index: 1;
        cursor: pointer;
    }
    #anmt-canvas {
        background-color: #fff;
        image-rendering: -moz-crisp-edges;
        image-rendering: -webkit-crisp-edges;
        image-rendering: pixelated;
        image-rendering: crisp-edges;
    }

script.
    let playingState = -1; // -1: not playing, 0: playing, 1: paused, 2: reversed
    let currentFrame = 0; // frame index

    const videoData = {
        width: 0,
        height: 0,
        fps: 0,
        data: [],
        frameIndexes: [],
    }

    // on input change, read the file and display the preview
    // get #input-button element
    document.getElementById('input-button')
    .addEventListener('change', function(e) {
        // get the file from the input
        const file = e.target.files[0]
        
        // read the bytes of the file
        const reader = new FileReader()
        reader.readAsArrayBuffer(file)

        reader.onload = function(e) {
            const bytes = Array.from(new Uint8Array(e.target.result))
            videoData.data = bytes

            // [ width, height, fps, fps_decimals ]
            videoData.width = bytes[0]
            videoData.height = bytes[1]
            videoData.fps = bytes[2] + bytes[3] / 256

            // get the canvas element
            const canvas = document.getElementById('anmt-canvas')
            const ctx = canvas.getContext('2d')

            canvas.width = videoData.width
            canvas.height = videoData.height
            ctx.fillStyle = '#fff'
            ctx.fillRect(0, 0, videoData.width, videoData.height)

            // set canvas height to the height of the page
            canvas.style.height = window.innerHeight * 0.7 + 'px'
            canvas.style.width = "auto"

            videoData.frameIndexes = [];
            let currentIndex = 0;

            // [ 0, x, y, r, g, b, x, y, r, g, b, ... ]
            while (true) {
                if (currentIndex >= bytes.length) break
                if (bytes[currentIndex] == 0) {
                    videoData.frameIndexes.push(currentIndex)
                    currentIndex++
                } else {
                    currentIndex += 5
                }
            }
        }
    })

    // on play button click, play the animation
    document.getElementById('play-button')
    .addEventListener('click', function(e) {
        document.getElementById('current-state').innerHTML = 'Playing'
        play()
    })

    // on pause button click, pause the animation
    document.getElementById('pause-button')
    .addEventListener('click', function(e) {
        document.getElementById('current-state').innerHTML = 'Paused'
        playingState = 1
    })

    // on reverse button click, reverse the animation
    document.getElementById('reverse-button')
    .addEventListener('click', function(e) {
        document.getElementById('current-state').innerHTML = 'Reversed'
        playingState = 2
    })

    // on play, start the animation
    function play() {
        if (playingState == 0) {
            currentFrame = 0
        }
        playingState = 0
    }

    (async function() {
        let currentTime = new Date().getTime()
        const divCurrentFrame = document.getElementById('current-frame')

        while (true) {
            await new Promise(res => setTimeout(res, 0))

            if (playingState == -1 || playingState == 1) continue; // paused or not playing

            // check if current time is greater than the time of the next frame
            if (new Date().getTime() - currentTime >= 1000 / videoData.fps) {
                currentTime = new Date().getTime()
                divCurrentFrame.innerHTML = 'Frame: ' + currentFrame
            } else {
                continue
            }

            let currentFrameIndex = videoData.frameIndexes[currentFrame] + 1

            while (videoData.data[currentFrameIndex] != 0 && currentFrameIndex < videoData.data.length) {
                const [x, y, r, g, b] = videoData.data.slice(currentFrameIndex, currentFrameIndex + 5)
                currentFrameIndex += 5

                const ctx = document.getElementById('anmt-canvas').getContext('2d')
                ctx.fillStyle = `rgb(${r}, ${g}, ${b})`
                ctx.fillRect(x - 1, y - 1, 1, 1)
            }

            if (playingState == 0) {
                currentFrame++
            } else if (playingState == 2) {
                currentFrame--
            }

            if (currentFrame < 0) currentFrame = videoData.frameIndexes.length - 1
            if (currentFrame >= videoData.frameIndexes.length) currentFrame = 0
        }
    })();
