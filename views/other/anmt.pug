doctype html

head
    title ANMT
    meta(name='viewport' content='width=device-width, initial-scale=1.0')
    link(rel='icon' type='image/png' size='64' href='assets/icon.png')
    link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css')

body
    div#upload
        div.clickable(onclick="document.querySelector('#input-button').click();")
            br
            div.fa &#xF093;
            p.no-interact(style='text-align: center; font-size:28px') Load ANMT file
            br
            div.lds-dual-ring.lds-center(style='display: none;')
            div.lds-percent.lds-center(style='display: none;')
                div#percent-bar(style='display: none;')
            input#input-button(type='file' accept='.anmt')
        div.hide-on-load
            h2 Examples
            div.anmt-grid.hide-on-load
                each file in files
                    div.clickable.anmt-grid-item= file

    div#hid(style='display: none;position: absolute;transform: translate(-50%, -50%);top: 50%;left: 50%;')
        canvas#anmt-canvas(width='0' height='0')
        p#frames() Frame: 0
        button#play-button(type='button')
            img(src='https://img.icons8.com/ios-glyphs/30/000000/play--v1.png' style='filter: invert(100%);')
        button#pause-button(type='button')
            img(src='https://img.icons8.com/ios-glyphs/30/000000/pause--v1.png' style='filter: invert(100%);')
        button#rev-button(type='button')
            img(src='https://img.icons8.com/ios-glyphs/30/000000/rewind--v1.png' style='filter: invert(100%);')

style.
    body {
        background: grey;
        font-family: Arial, sans-serif;
        text-align: center; 
    }
    .clickable {
        cursor: pointer;
    }
    .anmt-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        grid-gap: 10px;
        margin: 0 auto;
        max-width: 800px;
    }
    .anmt-grid-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: #000;
        background-color: #fff;
        border: 5px solid #777;
        padding: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .lds-center {
        position: relative;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    .no-interact {
        pointer-events: none;
    }
    .lds-dual-ring {
        display: inline-block;
        width: 80px;
        height: 80px;
    }
    .lds-dual-ring:after {
        content: " ";
        display: block;
        width: 64px;
        height: 64px;
        margin: 8px;
        border-radius: 50%;
        border: 6px solid #fff;
        border-color: #fff transparent #fff transparent;
        animation: lds-dual-ring 1.2s linear infinite;
    }
    @keyframes lds-dual-ring {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }
    .lds-percent {
        display: inline-block;
        width: 90%;
        height: 20px;
        background: #000;
    }
    .fa {
        background: transparent;
        border: none;
        cursor: pointer;
        width: 100%;
        height: 100%;
        font-size:24px;
        font-size: 48px;
        color: white;
    }
    #upload {
        position: absolute;
        transform: translate(-50%, -50%);
        top: 50%;
        left: 50%;
        border-style: dotted;
        border-color: white;
        color: white;
        border-radius: 12px;
        width: 50%;
    }
    #input-button {
        display: none;
        background-color: #fff;
        z-index: 1;
        cursor: pointer;
    }
    #percent-bar {
        position: absolute;
        top: 0;
        left: 0;
        width: 0%;
        height: 100%;
        background: #FF00AA;
        color: #fff;
    }
    #anmt-canvas {
        background: black;
        image-rendering: -moz-crisp-edges;
        image-rendering: -webkit-crisp-edges;
        image-rendering: pixelated;
        image-rendering: crisp-edges;
    }
    #frames {
        height: auto;
        background: rgba(0,0,0,0.5);
        width: 10%;
        border: none;
        color: white;
        position: absolute;
        top: 0.35%;
        left: 0%;
    }
    #play-button {
        border-radius:50%;
        height: 6.5%;
        background: rgba(0,0,0,0.5);
        border: none;
        color: white;
        position: absolute;
        top: 85%;
        left: 45%;
        cursor: pointer;
    }
    #pause-button {
        border-radius: 50%;
        height: 6.5%;
        background: rgba(0,0,0,0.5);
        border: none;
        color: white;
        position: absolute;
        top: 85%;
        left: 50%;
        cursor: pointer;
    }
    #rev-button {
        border-radius:50%;
        height: 6.5%;
        background: rgba(0,0,0,0.5);
        border: none;
        color: white;
        position: absolute;
        top: 85%;
        left: 55%;
        cursor: pointer;
    }

script.
    let loaded = false; // utility thing to make stuff not load twice

    const canvas = document.querySelector('canvas');
    let playingState = 0; // 0: playing, 1: paused, 2: reversed
    let currentFrame = 0; // frame index

    const videoData = {
        width: 0,
        height: 0,
        fps: 0,
        data: [],
        frameIndexes: [],
    }

    function load(file) {
        loaded = true

        document.querySelector('.fa').style.display = "none";
        document.querySelector('.hide-on-load').style.display = "none";
        document.querySelector('.lds-dual-ring').style.display = "block";
        document.querySelector('.lds-percent').style.display = "block";
        document.querySelector('#percent-bar').style.display = "block";

        // read the bytes of the file
        const reader = new FileReader()
        reader.readAsArrayBuffer(file)

        reader.onload = async function(e) {
            const bytes = Array.from(new Uint8Array(e.target.result))
            videoData.data = bytes

            // [ width, height, fps, fps_decimals ]
            videoData.width = bytes[0]
            videoData.height = bytes[1]
            videoData.fps = bytes[2] + bytes[3] / 256

            // get the canvas element
            const canvas = document.getElementById('anmt-canvas')
            const ctx = canvas.getContext('2d')

            canvas.width = videoData.width
            canvas.height = videoData.height
            ctx.fillStyle = '#fff'
            ctx.fillRect(0, 0, videoData.width, videoData.height)

            // set canvas height to the height of the page
            canvas.style.height = window.innerHeight * 0.9 + 'px'
            canvas.style.width = "auto"

            videoData.frameIndexes = [];
            let currentIndex = 4;
            let lastPercent = 0;

            while (true) {
                if (currentIndex >= bytes.length) break
                if (bytes[currentIndex] == 0) {
                    const currentPercent = Math.round(currentIndex / bytes.length * 100)
                    if (currentPercent > lastPercent) {
                        lastPercent = currentPercent
                        document.querySelector('#percent-bar').style.width = `${lastPercent}%`
                        await new Promise(r => setTimeout(r, 0))
                    }
                    videoData.frameIndexes.push(currentIndex)
                    currentIndex++
                } else {
                    currentIndex += 5
                }
            }
            document.querySelector('#upload').style.display = "none";
            document.querySelector('#hid').style.display = "block";
        }
    }

    // on input change, read the file and display the preview
    // get #input-button element
    document.getElementById('input-button')
    .addEventListener('change', function(e) {
        if (!loaded) load(e.target.files[0])
    })

    for (const gridItem of document.getElementsByClassName("anmt-grid-item")) {
        gridItem.addEventListener("click", async () => {
            if (!loaded)
                fetch(gridItem.innerHTML)
                .then(anmt => anmt.blob())
                .then(anmt => load(anmt))
                .catch(err => {});
        })
    }

    // on play button click, play the animation
    document.getElementById('play-button')
    .addEventListener('click', function(e) {
        play()
    })

    // on pause button click, pause the animation
    document.getElementById('pause-button')
    .addEventListener('click', function(e) {
        playingState = 1
    })

    // on reverse button click, reverse the animation
    document.getElementById('rev-button')
    .addEventListener('click', function(e) {
        reverse()
    })

    // on play, start the animation
    function play() {
        if (playingState == 0) currentFrame = 0
        playingState = 0
    }

    // on reverse, reverse the animation
    function reverse() {
        if (playingState == 2) currentFrame = videoData.frameIndexes.length - 1
        playingState = 2
    }

    (async function() {
        let currentTime = new Date().getTime()

        while (true) {
            await new Promise(res => setTimeout(res, 0))

            if (playingState == -1 || playingState == 1) continue; // paused or not playing

            // check if current time is greater than the time of the next frame
            if (new Date().getTime() - currentTime >= 1000 / videoData.fps) {
                currentTime = new Date().getTime()
                document.querySelector('#frames').innerHTML = 'Frame: ' + currentFrame
            } else {
                continue
            }

            let currentFrameIndex = videoData.frameIndexes[currentFrame] + 1

            while (videoData.data[currentFrameIndex] != 0 && currentFrameIndex < videoData.data.length) {
                const [x, y, r, g, b] = videoData.data.slice(currentFrameIndex, currentFrameIndex + 5)
                currentFrameIndex += 5

                const ctx = document.getElementById('anmt-canvas').getContext('2d')
                ctx.fillStyle = `rgb(${r}, ${g}, ${b})`
                ctx.fillRect(x - 1, y - 1, 1, 1)
            }

            if (playingState == 0) {
                currentFrame++
            } else if (playingState == 2) {
                currentFrame--
            }

            if (currentFrame < 0) currentFrame = videoData.frameIndexes.length - 1
            if (currentFrame >= videoData.frameIndexes.length) currentFrame = 0
        }
    })();
