include ../includes/style.pug

h1 Specky Radio

p Click on the radio for some epic song

div.center(style="max-width: 90vw; height: fit-content;")
    img#start_music(
        src="https://www.freepnglogos.com/uploads/radio-png/file-circle-icons-radio-svg-wikimedia-commons-0.png"
        style="max-width: 100%; max-height: 80vh;"
    )

script.
    const SONG_URL = "/radio/song.mp3";

    const button = document.getElementById("start_music");
    let isPlaying = false;
    let isError = false;

    button.addEventListener("click", async () => {
        if(isPlaying || isError) return;

        isPlaying = true; // doing this will stop multiple playing requests

        try {
            const reader = await fetch(SONG_URL).then(res => res.body.getReader());
            const data = [];

            while(true) {
                const { value, done } = await reader.read();
                if(value) data.push(value);
                if(done) break;
            }

            const songBuffer = new Uint8Array(data.reduce((sum, val) => sum + val.length, 0));

            let index = 0;
            for(const chunk of data) {
                songBuffer.set(chunk, index);
                index += chunk.length;
            }

            const songBufferArray = Array.from(songBuffer).map(v => String.fromCharCode(v));
            const songBufferString = songBufferArray.join("");

            window.audio = new Audio();
            audio.src = `data:audio/mp3;base64,${songBufferString}`;
            audio.loop = true;
            audio.controls = false;
            
            document.body.appendChild(window.audio);
            await window.audio.play().catch(console.error);

            (async () => {
                const LOOP_BACK = 22.000; // it should actually be 21.999
                const LOOP_START = 22.800;

                while(isPlaying) {
                    await new Promise(res => setTimeout(res, 10))

                    if(audio.currentTime >= LOOP_START) {
                        audio.currentTime -= LOOP_BACK;
                    }
                }
            })();

            isPlaying = true;
        } catch(err) {
            isError = true;
            isPlaying = false;

            const errorElement = document.createElement('h1');
            errorElement.innerHTML = `ERROR: ${err}`;
            errorElement.style = `color: red`;
            document.body.appendChild(errorElement);
        }
    });
